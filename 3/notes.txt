There are two layout:
1. Page layout
2. Component layout


There are three way to build layouts with CSS
1. Float layout:
the old way of building of all sizes, still used, but getting outdated!
2. Flexbox:
Modern wayof laying out elements in 1-dimesional row without using floats
perfect for component layouts
3. CSS Grid
For laying out element in a fully-fledged 2-dimensional grid. 
Perfect for page layouts and complex components


-lorem in htl generate text



FLOAT ELEMENT:
- Element is removed from the normal flow-> out of flow
- Text and inline element will wrap around the floated element
- The container will not adjust its height to the element (Collapsing element)

BOX-Sizing == Border-size



Flexbox:
- flexbox is a set of related css propeties for building 1-dimesional layouts
- the main idea behind flexbox is that empty space inside a container element
can be automaticly divided by its child elements
- flexbox makes it easy to automaticly align items to one another inside 
a parent container, both horizontally and vertically 
- flexbox solves common problems suchas vertical centring and creating equal-height
columns
- flexbox is perfect for replacing floats, allowing us to write fewer and cleaner
HTML and CSS code


Flexbox terminology

Flex container -> parent
 - display: flex

Flex item -> children

Main-axis =>  rtl or ltr
Cross-axis => utd or dtu

Flex-container propeties:
gap:0 | <length>
 - to create space between items, without using margin

justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly
 - to align items along main-axis (horizentally, by default)

align-items: stretch | flex-start | flex-end | center | baseline
 - to align items along cross-axis (vertically by default)

flex-direction: row | row-reverse | column | column-reverse 
 - to define which is main axis

flex-wrap: nowrap | wrap | wrap-reverse
 - to allow items to wrap into a new line if they are too large

align-content: stretch | flex-start | flex-end | center | space-between | space-around
 - only applies when there are multiple lines(flex-wrap: wrap) 


Flex-item properties:
align-self auto | stretch | flex-start | flex-end | center | baseline
 - to overwite align-item for indivdual items

flex-grow: 0 | <integer>
 - to allow an element to grow (0 means no, 1+ means yes)
 - it will let the specific element to grow as much as the container
 has space

flex-shrink: 1 | <integer>
 - to allow an element to shrink (0 means no, 1+ yeas)

flex-basis : auto | <length>
 - to define an item's width, instead of the width property

flex: 0 1 auto | <int> <int> <len>
 - Recomended shorthand for flex-grow flex-shrink flex-basis

order: 0 | <integer>
 - controls order of items, -1 makes item first, 1 makes it last